{"version":3,"sources":["utils/convert.js","views/Measurements.js","App.js","serviceWorker.js","index.js"],"names":["convert","fromUnit","toUnit","fromValue","result","toFixed","Area","state","measurements","id","type","value","selectedMeasurement","fromMeasurement","unit","toMeasurement","handleMeasurementSelect","e","setState","target","typeofMeasurement","find","el","handleFromUnitChange","handleToUnitChange","handleFromValueChange","measurement","handleToValueChange","handleSubmit","preventDefault","handleCalculate","console","log","options","this","map","key","values","className","onSubmit","htmlFor","onChange","placeholder","readOnly","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f80c18d.chunk.js","sourcesContent":["export default function convert(fromUnit, toUnit, fromValue) {\n    let result = 0\n\n    //Weight\n\n    if (fromUnit === 'kg' && toUnit === 'gm') {\n        result = fromValue * 1000\n    } else if (fromUnit === 'gm' && toUnit === 'kg') {\n        result = fromValue / 1000\n    } else if (fromUnit === 'kg' && toUnit === 'lbs') {\n        result = fromValue * 2.20462262185\n    } else if (fromUnit === 'lbs' && toUnit === 'kg') {\n        result = fromValue / 2.20462262185\n    } else if (fromUnit === 'gm' && toUnit === 'lbs') {\n        result = fromValue * 0.00220462262185\n    } else if (fromUnit === 'lbs' && toUnit === 'gm') {\n        result = fromValue / 0.00220462262185\n    }\n\n    //Length \n    else if (fromUnit === 'km' && toUnit === 'm') {\n        result = fromValue * 1000\n    } else if (fromUnit === 'm' && toUnit === 'km') {\n        result = fromValue / 1000\n    } else if (fromUnit === 'km' && toUnit === 'miles') {\n        result = fromValue * 0.62137119\n    } else if (fromUnit === 'miles' && toUnit === 'km') {\n        result = fromValue / 0.62137119\n    } else if (fromUnit === 'm' && toUnit === 'miles') {\n        result = fromValue * 0.00062137119\n    } else if (fromUnit === 'miles' && toUnit === 'm') {\n        result = fromValue / 0.00062137119\n    }\n    //same value \n    else if (fromUnit === toUnit) {\n        result = fromValue\n    }\n\n    if (result % 1 !== 0) {\n        result = result.toFixed(3)\n    }\n    return result\n}","import React from 'react';\nimport convert from '../utils/convert'\n\nclass Area extends React.Component {\n    state = {\n        measurements: [\n            { id: 1, type: 'Weight', value: ['kg', 'gm', 'lbs'] },\n            { id: 2, type: 'Length', value: ['km', 'm', 'miles'] },\n        ],\n        selectedMeasurement: 'Weight',\n        fromMeasurement: {\n            unit: 'kg',\n            value: ''\n        },\n        toMeasurement: {\n            unit: 'lbs',\n            value: ''\n        },\n        result: 0\n    }\n\n    componentDidMount() {\n\n    }\n\n    handleMeasurementSelect = (e) => {\n        this.setState({ selectedMeasurement: e.target.value })\n        const typeofMeasurement = this.state.measurements.find(el => el.type === e.target.value)\n        let fromMeasurement = { ...this.state.fromMeasurement }\n        let toMeasurement = { ...this.state.toMeasurement }\n        fromMeasurement = {\n            unit: typeofMeasurement.value[0],\n            value: ''\n        }\n        toMeasurement = {\n            unit: typeofMeasurement.value[1],\n            value: ''\n        }\n        this.setState({ fromMeasurement: fromMeasurement, toMeasurement: toMeasurement, result: 0 })\n    }\n\n    handleFromUnitChange = (e) => {\n        let fromMeasurement = { ...this.state.fromMeasurement }\n        let toMeasurement = { ...this.state.toMeasurement }\n\n        fromMeasurement.unit = e.target.value\n        const result = convert(e.target.value, this.state.toMeasurement.unit, this.state.fromMeasurement.value)\n        toMeasurement.value = result\n\n        this.setState({ fromMeasurement: fromMeasurement, result: result })\n    }\n\n    handleToUnitChange = (e) => {\n        let toMeasurement = { ...this.state.toMeasurement }\n\n        toMeasurement.unit = e.target.value\n        const result = convert(this.state.fromMeasurement.unit, e.target.value, this.state.fromMeasurement.value)\n        toMeasurement.value = result\n\n        this.setState({ toMeasurement: toMeasurement, result: result })\n    }\n\n    handleFromValueChange = (e) => {\n        let measurement = { ...this.state.fromMeasurement }\n        measurement.value = e.target.value\n        this.setState({ fromMeasurement: measurement })\n    }\n\n    handleToValueChange = (e) => {\n        let measurement = { ...this.state.toMeasurement }\n        measurement.value = e.target.value\n        this.setState({ toMeasurement: measurement })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.handleCalculate()\n    }\n\n    handleCalculate = () => {\n        const fromUnit = this.state.fromMeasurement.unit\n        const toUnit = this.state.toMeasurement.unit\n\n        const toMeasurement = { ...this.state.toMeasurement }\n\n        const fromValue = this.state.fromMeasurement.value\n\n        const result = convert(fromUnit, toUnit, fromValue)\n        toMeasurement.value = result\n        console.log(toMeasurement)\n        this.setState({ result: result, toMeasurement: toMeasurement })\n    }\n\n    render() {\n        const options = this.state.measurements.map(el => {\n            return <option key={el.id}> {el.type}</option>\n        })\n\n        const values = () => {\n            let typeofMeasurement = []\n            let measurementValues\n            typeofMeasurement = this.state.measurements.find(el => el.type === this.state.selectedMeasurement)\n\n            measurementValues = typeofMeasurement.value.map(el => {\n                return <option key={el}> {el}</option>\n            })\n            return measurementValues\n\n        }\n\n        // const measurementValues = \n\n        return (\n            <div className=\"app-content\" >\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group row\">\n                        <div className=\"col-md-4\">\n                            <label htmlFor=\"typeofMeasurement\"> Select measurement</label>\n                            <select className=\"form-control\"\n                                id=\"typeofMeasurement\"\n                                onChange={this.handleMeasurementSelect}\n                                value={this.state.selectedMeasurement}>\n                                {options}\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row mt-4\">\n                        <div className=\"col-md-2\">\n                            <input className=\"form-control\" type=\"number\" placeholder=\"0\"\n                                onChange={this.handleFromValueChange} value={this.state.fromMeasurement.value}></input>\n                        </div>\n\n                        <div className=\"col-md-2\">\n\n                            <select className=\"form-control\" onChange={this.handleFromUnitChange} value={this.state.fromMeasurement.unit}>\n                                {values()}\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <div className=\"col-md-2\">\n                            <input className=\"form-control\" type=\"number\" placeholder=\"0\"\n                                readOnly value={this.state.toMeasurement.value}></input>\n                        </div>\n\n                        <div className=\"col-md-2\">\n                            <select className=\"form-control\" onChange={this.handleToUnitChange} value={this.state.toMeasurement.unit}>\n                                {values()}\n                            </select>\n                        </div>\n                    </div>\n\n                    <div>\n                        <button type=\"submit\" className=\"btn btn-success\" onClick={this.handleSubmit}>Calculate</button>\n                    </div>\n                </form>\n\n                <div className=\"mt-4\">\n                    {this.state.result ? <span>\n                        <span className=\"display-3\">{this.state.result}</span>\n                        <span className=\"display-4 \">{this.state.toMeasurement.unit}</span>\n                    </span> : null}\n                </div>\n            </div>\n        )\n    }\n}\nexport default Area;","import React from 'react';\nimport Area from './views/Measurements.js'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container mb-5\">\n        <div className=\"mb-5\">\n          <h1 className=\"display-1\">Convert</h1>\n        </div>\n        <header></header>\n        <Area type=\"area\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}